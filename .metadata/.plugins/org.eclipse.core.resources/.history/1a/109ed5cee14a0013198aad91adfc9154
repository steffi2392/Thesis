import java.util.Stack; 
import java.util.ArrayList; 
import java.util.Set; 
import java.util.HashSet; 
import java.util.Deque; 
import java.util.LinkedList;
import java.util.Map; 
import java.util.HashMap; 

public class Edge {
	private Node left;
	private Node right; 
	boolean isDummy;
	int weight; 
	Direction direction; 
	Edge prev; 
	
	public Edge(Node left, Node right, boolean isDummy, int weight) {
		this.left = left;
		this.right = right;
		this.isDummy = isDummy;
		this.weight = weight;
		direction = Direction.NONE; 
		prev = null; // used in traversals -- previous edge visited
	}
	
	public boolean isDummy() {
		return isDummy;
	}
	
	public int getWeight() {
		return weight;
	}
	
	public void setWeight (int weight) {
		this.weight = weight; 
	}
	
	public Node getLeft() {
		return left;
	}
	
	public Node getRight() {
		return right;
	}
	
	public void setLeft(Node left) {
		this.left = left;
	}
	
	public void setRight(Node right) {
		this.right = right;
	}
	
	public Edge getPrev() {
		return prev; 
	}
	
	public void setPrev(Edge prev) {
		this.prev = prev; 
	}
	
	public String toString() {
		String append = isDummy ? "D" : "";
		return "(" + left.getId() + ", " + right.getId() + ")" + append;
	}
	
	// remove the edge from the edge lists of left and right
	public void remove() {
		left.removeEdge(this);
		right.removeEdge(this);
	}
	
	/**
	 * Finds a cycle that starts by traversing this edge in the direction given. 
	 * 
	 * Left -> Right = +1
	 * Right -> Left = -1
	 * 
	 * @param path Initially an empty list -- will eventually contain the cycle. 
	 * @param initDirection The direction the initial edge is traversed.
	 * @return the number of edges traversed. 
	 */
	public int findCycle(Deque<Edge> path, Direction initDirection, ArrayList<Integer> numLookedAtList, 
			int index, int N, boolean goHome) {
		IntWrapper numLookedAt = new IntWrapper(0); 
		Stack<Edge> stack = new Stack<Edge>(); 
		stack.add(this);
		Direction currDirection = initDirection; 
		
		Node startNode = (initDirection == Direction.L_TO_R) ? this.getLeft() : this.getRight();
		System.out.println("looking for cycle starting at: " + startNode.getId());
		
		Edge prevEdge = null; 
		Set<Node> visited = new HashSet<Node>(); 
		Set<Edge> traversed = new HashSet<Edge>();
		Map<Node, ArrayList<Integer>> positionMap = new HashMap<Node, ArrayList<Integer>>(); 
		ArrayList<Edge> edgesToHome = new ArrayList<Edge>(); 
		for (int i = 0; i < N; i++) {
			edgesToHome.add(null);
		}
		
		// Populate edgesToHome: slot 0 holds (startNode, 0) if it exists, null otherwise
		// This can just hold single edges (as opposed to LinkedLists) because it doesn't 
		// matter which edge you take home! Preferably take a +1 edge home.
		for (Edge e : startNode.getRealEdges()) {
			Node dest = e.getDestination(startNode);
			if (e.getWeight() > -1) {
				if (edgesToHome.get(dest.getId() % N) == null || e.getWeight() == 1) {
					edgesToHome.set(dest.getId() % N, e);
				}
			}
		}
		
		while (!stack.isEmpty()) {
			Edge currEdge = stack.peek(); 
			Node currNode = currEdge.getDestination(currDirection);
			System.out.println("currNode: " + currNode.getId());
				
				// We backtracked! the previous edge isn't on the cycle
				if (currEdge.getPrev() != prevEdge) {
					//System.out.println("backtracking! currEdge.getPrev = " + currEdge.getPrev() + " prevEdge = " + prevEdge);
					if (!path.isEmpty()) {
						while (currEdge.getPrev() != path.peekLast()) {
							Edge popped = path.pollLast(); 
							currDirection = currDirection.flipDirection(); 
							//visited.remove(popped.getDestination(currDirection));
							currNode = currEdge.getDestination(currDirection);
						}
					}
				}
				
				// found a cycle!
				if (currNode == startNode) {
					path.add(currEdge);
					numLookedAtList.set(index, numLookedAtList.get(index) + numLookedAt.asInteger());
					System.out.print("Looked at: " + numLookedAt.asInteger() + "   Cycle length: " + path.size());
					System.out.println(path);
					return path.size(); 
				}
				
				if (!path.contains(currEdge)) {
					path.add(currEdge);
				}
				
				Edge nextEdge = null; 
				ArrayList<Integer> positions; 
				if (positionMap.containsKey(currNode)) {
					positions = positionMap.get(currNode);
				} else {
					positions = new ArrayList<Integer>(); 
					positions.add(0);
					positions.add(0);
					positions.add(0); 
					positionMap.put(currNode, positions);
				}
				
				if (currDirection == Direction.L_TO_R) {
					// If I can go home, do it! (Only if goHome = true) 
					if (goHome && edgesToHome.get(currNode.getId() % N) != null) {
						numLookedAt.increment(); 
						nextEdge = edgesToHome.get(currNode.getId() % N);
					}
					
					if (nextEdge == null) {
						System.out.println("Checking plusOnes");
						nextEdge = processRightSide(positions, currNode, numLookedAt, visited, 0 /* plusOnes */, currNode.getPlusOnes()); 
						if (nextEdge == null) {
							// Only check the zeroes if we haven't already found one.  
							System.out.println("Checking zeroes"); 
							nextEdge = processRightSide(positions, currNode, numLookedAt, visited, 1 /* zeros */, currNode.getZeroes()); 
						}
					}
				} else {
					// If there is a dummy to take, take it!
					if (currNode.hasDummy() && currNode.getDummyEdge().weight == 0 
							&& !visited.contains(currNode.getDummyEdge().getDestination(currNode))) {
						numLookedAt.increment(); 
						nextEdge = currNode.getDummyEdge(); 
					}
					// Only check real edges if we didn't take a dummy
					if (nextEdge == null) {
						System.out.println("Checking minusOnes");
						nextEdge = processLeftSide(positions, currNode, numLookedAt, visited, 2 /* minusOnes */, currNode.getMinusOnes()); 
					}
					if (nextEdge == null) {
						// Only check the zeroes if we haven't already found one.
						System.out.println("Checking zeroes");
						nextEdge = processLeftSide(positions, currNode, numLookedAt, visited, 1 /* zeros */, currNode.getZeroes()); 
					}
				}
				
				// pop if you've looked at all the edges for this node. 
				if (currNode.getId() < N) {
					// on the left
					if (positions.get(1) >= currNode.getZeroes().size() - 1 &&
							positions.get(2) >= currNode.getMinusOnes().size() - 1) {
						Edge popped = stack.pop(); 
					}
				} else {
					// on the right
					if (positions.get(0) >= currNode.getPlusOnes().size() - 1 &&
							positions.get(1) >= currNode.getZeroes().size() - 1) {
						//stack.pop(); 
						Edge popped = stack.pop();
					}
				}
				
				if (nextEdge != null) {
					nextEdge.prev = currEdge;
					stack.add(nextEdge);
					//System.out.println("pushing " + nextEdge);
				} 
				
				prevEdge = currEdge; 
				currDirection = currDirection.flipDirection(); 
				visited.add(currNode);
				traversed.add(currEdge);
			//}
		}
		
		System.out.println("Did not find a cycle");
		//return numLookedAt; 
		return -1; 
	}
	
	private void updatePosition(ArrayList<Edge> list, ArrayList<Integer> positions, int i, Edge nextEdge, 
			int nextEdgePos, int availablePos) {
		if (availablePos != -1 && nextEdgePos < list.size() - 1) {
			Edge temp = list.get(nextEdgePos + 1);
			list.set(nextEdgePos + 1, nextEdge);
			list.set(availablePos, temp);
			nextEdgePos++; 
		} else if (nextEdgePos == list.size() - 1) {
			nextEdgePos++; 
		}
		if (nextEdgePos >= 0) {
			positions.set(i, nextEdgePos + 1);
		}
		System.out.println("Setting positions[" + i + "] to " + (nextEdgePos + 1)); 
	}
	
	public Node getDestination(Node start) {
		if (left == start) {
			return right;
		}
		if (right == start) {
			return left;
		}
		return null; 
	}
	
	public Node getDestination(Direction direction) {
		if (direction == Direction.L_TO_R) {
			return right;
		} else {
			return left;
		}
	}
	
	private Edge processRightSide(ArrayList<Integer> positions, Node currNode, IntWrapper numLookedAt, Set<Node> visited, int pos, 
			ArrayList<Edge> edgeList) {
		Edge nextEdge = null; 
		int nextEdgePos = -1; 
		int availablePos = -1;
		for (int i = positions.get(pos); i < edgeList.size(); i++) {
			Edge e = edgeList.get(i);
			numLookedAt.increment(); 
			Node next = e.getDestination(currNode);
			//System.out.println("looking at: " + e);
			if (nextEdge == null) {
				nextEdgePos = i; 
			}
			
			// If we can travel toward a node with a dummy, do it. 
			if (!visited.contains(next) && next.hasDummy() && next.getDummyEdge().getWeight() == 0) {
				/*if (nextEdge == null) {
					nextEdgePos = i;
				} else {
					availablePos = i; 
				}*/
				if (nextEdge != null) {
					availablePos = i; 
				}
				//System.out.println("Found one! Breaking. nextEdgePos = " + nextEdgePos + " availablePos = " + availablePos);
				nextEdge = e;
				break;
			} else if (!visited.contains(next) && nextEdge == null) {
				nextEdge = e;
				nextEdgePos = i;
				//System.out.println("Found one! But I'm going to keep looking. nextEdgePos = " + nextEdgePos + " availablePos = " + availablePos);
				//break;
			}
		}
		updatePosition(edgeList, positions, pos, nextEdge, nextEdgePos, availablePos);
		//System.out.println("edgeList: " + edgeList);
		//System.out.println("In processing function, numLookedAt = " + numLookedAt);
		return nextEdge;
	}
	
	private Edge processLeftSide(ArrayList<Integer> positions, Node currNode, IntWrapper numLookedAt, Set<Node> visited, int pos, 
			ArrayList<Edge> edgeList) {
		Edge nextEdge = null; 
		int availablePos = -1; 
		int nextEdgePos = -1; 
		for (int i = positions.get(pos); i < edgeList.size(); i++) {
			Edge e = edgeList.get(i);
			numLookedAt.increment(); 
			Node next = e.getDestination(currNode);
			//System.out.println("looking at: " + next.getId());
			nextEdgePos = i; 
			
			if (!visited.contains(next)) {
				nextEdge = e;
				nextEdgePos = i;
				//System.out.println("Found one! Breaking. nextEdgePos = " + nextEdgePos);
				break;
			}
		}
		updatePosition(edgeList, positions, pos, nextEdge, nextEdgePos, availablePos);
		//System.out.println("edgeList: " + edgeList);
		//System.out.println("In processing function, nextEdge = " + nextEdge);
		return nextEdge; 
	}
	
	public static enum Direction {
		NONE, L_TO_R, R_TO_L;
		
		public Direction flipDirection() {
			if (this == L_TO_R) {
				return R_TO_L;
			} else if (this == R_TO_L) {
				return L_TO_R;
			} else {
				return NONE;
			}
		}
		
		public int cost() {
			if (this == L_TO_R) {
				return 1; 
			} else if (this == R_TO_L) {
				return -1;
			} else {
				return 0; 
			}
		}
	}
}

